{
  "#!": {
    "prefix": ["env", "#!"],
    "body": ["#!/usr/bin/env python"],
    "description": null
  },
  "#!2": {
    "prefix": ["env2", "#!2"],
    "body": ["#!/usr/bin/env python2"],
    "description": null
  },
  "#!3": {
    "prefix": ["env3", "#!3"],
    "body": ["#!/usr/bin/env python3"],
    "description": null
  },
  "enc": {
    "prefix": ["enc"],
    "body": ["# -*- coding=utf-8 -*-"],
    "description": null
  },
  "enco": {
    "prefix": ["enco"],
    "body": ["# coding=utf-8"],
    "description": null
  },
  "imp": {
    "prefix": ["im", "imp"],
    "body": ["import ${0:module}"],
    "description": null
  },
  "from": {
    "prefix": ["fim", "from"],
    "body": ["from ${1:package} import ${0:module}"],
    "description": null
  },
  "fdt": {
    "prefix": ["fdt"],
    "body": ["from dataclasses import dataclass"],
    "description": "from dataclasses import dataclass"
  },
  "cl": {
    "prefix": "cl",
    "body": [
      "class ${1:ClassName}(${2:object}):",
      "\t\"\"\"${3:docstring for $1}\"\"\"",
      "\tdef __init__(self, ${4:arg}):",
      "\t\t${5:super($1, self).__init__()}",
      "\t\tself.$4 = $4",
      "\t\t${0}"
    ],
    "description": null
  },
  "cla": {
    "prefix": "cla",
    "body": ["class ${1:class_name}:", "\t\"\"\"${0:description}\"\"\""],
    "description": null
  },
  "clai": {
    "prefix": "clai",
    "body": [
      "class ${1:class_name}:",
      "\t\"\"\"${2:description}\"\"\"",
      "\tdef __init__(self, ${3:args}):",
      "\t\t${0}"
    ],
    "description": null
  },
  "claip": {
    "prefix": "claip",
    "body": [
      "class ${1:class_name}:",
      "\t\"\"\"${2:description}\"\"\"",
      "\tdef __init__(self, ${3:args}):",
      "\t\t${4}",
      "\n",
      "\tdef __post_init__(self, ${5:args}):",
      "\t\t${0}"
    ],
    "description": null
  },
  "dtcl": {
    "prefix": ["dtcl", "dtcls"],
    "body": ["@dataclass", "class ${1:class_name}:", "\t${0}"],
    "description": null
  },
  "dtcla": {
    "prefix": ["dtcla"],
    "body": [
      "@dataclass",
      "class ${1:class_name}:",
      "\t\"\"\"${2:description}\"\"\"",
      "\t${0}"
    ],
    "description": null
  },
  "dtclap": {
    "prefix": ["dtclap"],
    "body": [
      "@dataclass",
      "class ${1:class_name}:",
      "\t\"\"\"${2:description}\"\"\"",
      "\t${3}",
      "\tdef __post_init__(self, ${4:args}):",
      "\t\t${0}"
    ],
    "description": null
  },
  "df, def": {
    "prefix": ["def", "df"],
    "body": [
      "def ${1:fname}(${2:args):",
      "\t\"\"\"${3:docstring for $1}\"\"\"",
      "\t${0}"
    ],
    "description": null
  },
  "dff, deff": {
    "prefix": ["dff", "deff"],
    "body": ["def ${1:fname}(self, ${2:args}):", "\t${0}"],
    "description": null
  },
  "sdf, sdef": {
    "prefix": ["sdf", "sdef"],
    "body": ["@staticmethod", "def ${1:fname}(${2:args}):", "\t${0}"],
    "description": null
  },

  "uni": {
    "prefix": "uni",
    "body": ["def __unicode__(self):", "\t${0:representation}"],
    "description": null
  },
  "docs": {
    "prefix": "docs",
    "body": [
      "\"\"\"",
      "File: ${1:`vim_snippets#Filename('$1.py', 'foo.py')`}",
      "Author: `g:snips_author`",
      "Email: `g:snips_email`",
      "Github: `g:snips_github`",
      "Description: ${0}",
      "\"\"\"",
      ""
    ],
    "description": null
  },
  "sk \"skip unittests\" b": {
    "prefix": "sk",
    "body": ["@unittest.skip(${1:skip_reason})", ""],
    "description": null
  },
  "wh": {
    "prefix": "wh",
    "body": ["while ${1:condition}:", "\t${0:${VISUAL}}"],
    "description": null
  },
  "dowh": {
    "prefix": "dowh",
    "body": ["while True:", "\t${1}", "\tif ${0:condition}:", "\t\tbreak"],
    "description": null
  },
  "with": {
    "prefix": ["wth", "with"],
    "body": ["with ${1:expr} as ${2:var}:", "\t${0:${VISUAL}}"],
    "description": null
  },
  "awith": {
    "prefix": "awith",
    "body": ["async with ${1:expr} as ${2:var}:", "\t${0:${VISUAL}}"],
    "description": null
  },
  "adef": {
    "prefix": "adef",
    "body": [
      "async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):",
      "\t\"\"\"${3:docstring for $1}\"\"\"",
      "\t${0}"
    ],
    "description": null
  },
  "adeff": {
    "prefix": "adeff",
    "body": [
      "async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):",
      "\t${0}"
    ],
    "description": null
  },
  "defi": {
    "prefix": "defi",
    "body": ["def __init__(self, ${1:args}):", "\t${0}"],
    "description": null
  },
  "defm": {
    "prefix": "defm",
    "body": ["def ${1:mname}(self, ${2:arg}):", "\t${0}"],
    "description": null
  },
  "adefm": {
    "prefix": "adefm",
    "body": ["async def ${1:mname}(self, ${2:arg}):", "\t${0}", ""],
    "description": null
  },
  "property": {
    "prefix": "property",
    "body": [
      "def ${1:foo}():",
      "\tdoc = \"${2:The $1 property.}\"",
      "\tdef fget(self):",
      "\t\t${3:return self._$1}",
      "\tdef fset(self, value):",
      "\t\t${4:self._$1 = value}",
      "\tdef fdel(self):",
      "\t\t${0:del self._$1}",
      "\treturn locals()",
      "$1 = property(**$1())"
    ],
    "description": null
  },
  "if": {
    "prefix": "if",
    "body": ["if ${1:condition}:", "\t${0:${VISUAL}}"],
    "description": null
  },
  "el": {
    "prefix": "el",
    "body": ["else:", "\t${0:${VISUAL}}"],
    "description": null
  },
  "ei": {
    "prefix": "ei",
    "body": ["elif ${1:condition}:", "\t${0:${VISUAL}}"],
    "description": null
  },
  "for": {
    "prefix": "for",
    "body": ["for ${1:item} in ${2:items}:", "\t${0}"],
    "description": null
  },
  "cutf8": {
    "prefix": "cutf8",
    "body": ["# -*- coding: utf-8 -*-"],
    "description": null
  },
  "clatin1": {
    "prefix": "clatin1",
    "body": ["# -*- coding: latin-1 -*-"],
    "description": null
  },
  "cascii": {
    "prefix": "cascii",
    "body": ["# -*- coding: ascii -*-"],
    "description": null
  },
  "ld": {
    "prefix": "ld",
    "body": ["${1:var} = lambda ${2:vars} : ${0:action}"],
    "description": null
  },
  "ret": {
    "prefix": "ret",
    "body": ["return ${0}"],
    "description": null
  },
  ".": {
    "prefix": ".",
    "body": ["self."],
    "description": null
  },
  "try Try/Except": {
    "prefix": "try",
    "body": [
      "try:",
      "\t${1:${VISUAL}}",
      "except ${2:Exception} as ${3:e}:",
      "\t${0:raise $3}"
    ],
    "description": null
  },
  "trye Try/Except/Else": {
    "prefix": "trye",
    "body": [
      "try:",
      "\t${1:${VISUAL}}",
      "except ${2:Exception} as ${3:e}:",
      "\t${4:raise $3}",
      "else:",
      "\t${0}"
    ],
    "description": null
  },
  "tryf Try/Except/Finally": {
    "prefix": "tryf",
    "body": [
      "try:",
      "\t${1:${VISUAL}}",
      "except ${2:Exception} as ${3:e}:",
      "\t${4:raise $3}",
      "finally:",
      "\t${0}"
    ],
    "description": null
  },
  "tryef Try/Except/Else/Finally": {
    "prefix": "tryef",
    "body": [
      "try:",
      "\t${1:${VISUAL}}",
      "except ${2:Exception} as ${3:e}:",
      "\t${4:raise $3}",
      "else:",
      "\t${5}",
      "finally:",
      "\t${0}"
    ],
    "description": null
  },
  "ifmain": {
    "prefix": "ifmain",
    "body": ["if __name__ == '__main__':", "\t${0:main()}"],
    "description": null
  },
  "_": {
    "prefix": "_",
    "body": ["__${1:init}__"],
    "description": null
  },
  "pdb": {
    "prefix": "pdb",
    "body": ["__import__('pdb').set_trace()"],
    "description": null
  },
  "bpdb": {
    "prefix": "bpdb",
    "body": ["__import__('bpdb').set_trace()"],
    "description": null
  },
  "ipdb": {
    "prefix": "ipdb",
    "body": ["__import__('ipdb').set_trace()"],
    "description": null
  },
  "iem": {
    "prefix": "iem",
    "body": ["__import__('IPython').embed()"],
    "description": null
  },
  "rpdb": {
    "prefix": "rpdb",
    "body": ["__import__('rpdb').set_trace()"],
    "description": null
  },
  "wdb": {
    "prefix": "wdb",
    "body": ["__import__('wdb').set_trace()"],
    "description": null
  },
  "ptpython": {
    "prefix": "ptpython",
    "body": [
      "__import__('ptpython.repl', fromlist=('repl')).embed(globals(), locals(), vi_mode=${1:False}, history_filename=${2:None})"
    ],
    "description": null
  },
  "pudb": {
    "prefix": "pudb",
    "body": ["__import__('pudb').set_trace()"],
    "description": null
  },
  "nosetrace": {
    "prefix": "nosetrace",
    "body": ["__import__('nose').tools.set_trace()"],
    "description": null
  },
  "pprint": {
    "prefix": "pprint",
    "body": ["__import__('pprint').pprint(${1})"],
    "description": null
  },
  "\"": {
    "prefix": "\"",
    "body": ["\"\"\"${0:doc}", "\"\"\""],
    "description": null
  },
  "a=": {
    "prefix": "a=",
    "body": ["self.assertEqual(${0}, ${1})"],
    "description": null
  },
  "test": {
    "prefix": "test",
    "body": [
      "def test_${1:description}(${2:`indent('.') ? 'self' : ''`}):",
      "\t${0}"
    ],
    "description": null
  },
  "testcase": {
    "prefix": "testcase",
    "body": [
      "class ${1:ExampleCase}(unittest.TestCase):",
      "",
      "\tdef test_${2:description}(self):",
      "\t\t${0}"
    ],
    "description": null
  },
  "tgwt": {
    "prefix": "tgwt",
    "body": ["# given: ${1}", "# when: ${2}", "# then: ${3}"],
    "description": null
  },
  "fut": {
    "prefix": "fut",
    "body": ["from __future__ import ${0}"],
    "description": null
  },
  "getopt": {
    "prefix": "getopt",
    "body": [
      "try:",
      "\t# Short option syntax: \"hv:\"",
      "\t# Long option syntax: \"help\" or \"verbose=\"",
      "\topts, args = getopt.getopt(sys.argv[1:], \"${1:short_options}\", [${2:long_options}])",
      "",
      "except getopt.GetoptError, err:",
      "\t# Print debug info",
      "\tprint str(err)",
      "\t${3:error_action}",
      "",
      "for option, argument in opts:",
      "\tif option in (\"-h\", \"--help\"):",
      "\t\t${0}",
      "\telif option in (\"-v\", \"--verbose\"):",
      "\t\tverbose = argument"
    ],
    "description": null
  },
  "addp": {
    "prefix": "addp",
    "body": ["parser = ${VISUAL:argparse.}ArgumentParser()"],
    "description": null
  },
  "addsp": {
    "prefix": "addsp",
    "body": [
      "${0:sub_parser} = parser.add_subparsers().add_parser(\"${1:name}\")"
    ],
    "description": null
  },
  "addarg": {
    "prefix": "addarg",
    "body": [
      "parser.add_argument(\"${0:short_arg}\", \"${1:long_arg}\", default=${2:None}, help=\"${3:Help text}\")"
    ],
    "description": null
  },
  "addnarg": {
    "prefix": "addnarg",
    "body": [
      "parser.add_argument(\"${0:arg}\", nargs=\"${1:*}\", default\"${2:None}, help=\"${3:Help text}\")"
    ],
    "description": null
  },
  "addaarg": {
    "prefix": "addaarg",
    "body": [
      "parser.add_argument(\"${0:arg}\", \"${1:long_arg}\", action=\"${2:store_true}\", default=${3:False}, help=\"${4:Help text}\")"
    ],
    "description": null
  },
  "pargs": {
    "prefix": "pargs",
    "body": ["\"${VISUAL:return }\"parser.parse_args()", ""],
    "description": null
  },
  "glog": {
    "prefix": "glog",
    "body": ["import logging", "LOGGER = logging.getLogger(${0:__name__})"],
    "description": null
  },
  "le": {
    "prefix": "le",
    "body": ["LOGGER.error(${0:msg})"],
    "description": null
  },
  "lg": {
    "prefix": "lg",
    "body": ["LOGGER.debug(${0:msg})"],
    "description": null
  },
  "lw": {
    "prefix": "lw",
    "body": ["LOGGER.warning(${0:msg})"],
    "description": null
  },
  "lc": {
    "prefix": "lc",
    "body": ["LOGGER.critical(${0:msg})"],
    "description": null
  },
  "li": {
    "prefix": "li",
    "body": ["LOGGER.info(${0:msg})"],
    "description": null
  },
  "epydoc": {
    "prefix": "epydoc",
    "body": [
      "\"\"\"${1:Description}",
      "",
      "@param ${2:param}: ${3: Description}",
      "@type  $2: ${4: Type}",
      "",
      "@return: ${5: Description}",
      "@rtype : ${6: Type}",
      "",
      "@raise e: ${0: Description}",
      "\"\"\""
    ],
    "description": null
  },
  "dol": {
    "prefix": "dol",
    "body": [
      "def ${1:__init__}(self, *args, **kwargs):",
      "    super(${0:ClassName}, self).$1(*args, **kwargs)"
    ],
    "description": null
  },
  "kwg": {
    "prefix": "kwg",
    "body": ["self.${1:var_name} = kwargs.get('$1', ${2:None})"],
    "description": null
  },
  "lkwg": {
    "prefix": "lkwg",
    "body": ["${1:var_name} = kwargs.get('$1', ${2:None})"],
    "description": null
  },
  "args": {
    "prefix": "args",
    "body": ["*args${1:,}${0}"],
    "description": null
  },
  "kwargs": {
    "prefix": "kwargs",
    "body": ["**kwargs${1:,}${0}"],
    "description": null
  },
  "akw": {
    "prefix": "akw",
    "body": ["*args, **kwargs${1:,}${0}", ""],
    "description": null
  },
  "lcp list comprehension": {
    "prefix": "lcp",
    "body": ["[${1} for ${2} in ${3:${VISUAL}}]${0}", ""],
    "description": null
  },
  "dcp dict comprehension": {
    "prefix": "dcp",
    "body": ["{${1}: ${2} for ${3} in ${4:${VISUAL}}}${0}", ""],
    "description": null
  },
  "scp set comprehension": {
    "prefix": "scp",
    "body": ["{${1} for ${2} in ${3:${VISUAL}}}${0}", ""],
    "description": null
  },
  "contain \"methods for emulating a container type\" b": {
    "prefix": "contain",
    "body": [
      "def __len__(self):",
      "\t${1:pass}",
      "",
      "def __getitem__(self, key):",
      "\t${2:pass}",
      "",
      "def __setitem__(self, key, value):",
      "\t${3:pass}",
      "",
      "def __delitem__(self, key):",
      "\t${4:pass}",
      "",
      "def __iter__(self):",
      "\t${5:pass}",
      "",
      "def __reversed__(self):",
      "\t${6:pass}",
      "",
      "def __contains__(self, item):",
      "\t${7:pass}",
      ""
    ],
    "description": null
  },
  "context \"context manager methods\" b": {
    "prefix": "context",
    "body": [
      "def __enter__(self):",
      "\t${1:pass}",
      "",
      "def __exit__(self, exc_type, exc_value, traceback):",
      "\t${2:pass}",
      ""
    ],
    "description": null
  },
  "attr \"methods for customizing attribute access\" b": {
    "prefix": "attr",
    "body": [
      "def __getattr__(self, name):",
      "\t${1:pass}",
      "",
      "def __setattr__(self, name, value):",
      "\t${2:pass}",
      "",
      "def __delattr__(self, name):",
      "\t${3:pass}",
      ""
    ],
    "description": null
  },
  "desc \"methods implementing descriptors\" b": {
    "prefix": "desc",
    "body": [
      "def __get__(self, instance, owner):",
      "\t${1:pass}",
      "",
      "def __set__(self, instance, value):",
      "\t${2:pass}",
      "",
      "def __delete__(self, instance):",
      "\t${3:pass}",
      ""
    ],
    "description": null
  },
  "cmp \"methods implementing rich comparison\"": {
    "prefix": "cmp",
    "body": [
      "def __eq__(self, other):",
      "\t${1:pass}",
      "",
      "def __ne__(self, other):",
      "\t${2:pass}",
      "",
      "def __lt__(self, other):",
      "\t${3:pass}",
      "",
      "def __le__(self, other):",
      "\t${4:pass}",
      "",
      "def __gt__(self, other):",
      "\t${5:pass}",
      "",
      "def __ge__(self, other):",
      "\t${6:pass}",
      "",
      "def __cmp__(self, other):",
      "\t${7:pass}",
      ""
    ],
    "description": null
  },
  "repr \"methods implementing string representation\"": {
    "prefix": "repr",
    "body": [
      "def __repr__(self):",
      "\t${1:pass}",
      "",
      "def __str__(self):",
      "\t${2:pass}",
      "",
      "def __unicode__(self):",
      "\t${3:pass}",
      ""
    ],
    "description": null
  }
}
